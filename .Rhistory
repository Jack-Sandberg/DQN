q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
a <- min(1,lambda^(theta_new-theta[i-1])*factorial(theta_new)/factorial(theta[i-1])*q_fact)
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
runif(1)
a
theta_new
factorial(172)
min(c(1,NaN))
lambda <- 5
n <- 100000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new = theta+1){a <- min(1,lambda/theta_new*q_fact)}
else(a <- min(1,theta/lambda*q_fact))
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
lambda <- 5
n <- 100000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new = theta+1){a <- min(1,lambda/theta_new*q_fact)}
else{a <- min(1,theta/lambda*q_fact)}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
lambda <- 5
n <- 100000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new = theta+1){a <- min(1,lambda/theta_new*q_fact)}
else{a <- min(1,theta/lambda*q_fact)}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
a
theta_new
theta
i
theta[i]
theta[i-1]
theta[i-2]
theta[i-5]
theta[i-100]
theta[1:15]
theta_new
lambda <- 5
n <- 100000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new = theta+1){a <- min(1,lambda/theta_new*q_fact)}
else{a <- min(1,theta/lambda*q_fact)}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
lambda <- 5
n <- 100000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta+1){a <- min(1,lambda/theta_new*q_fact)}
else{a <- min(1,theta/lambda*q_fact)}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
lambda <- 5
n <- 10000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta+1){a <- min(1,lambda/theta_new*q_fact)}
else{a <- min(1,theta/lambda*q_fact)}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
warnings()
lambda <- 5
n <- 10000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta[i-1]+1){a <- min(c(1,lambda/theta_new*q_fact))}
else{a <- min(c(1,theta[i-1]/lambda*q_fact))}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
lambda <- 5
n <- 10000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta[i-1]+1){a <- min(c(1,lambda/theta_new*q_fact))}
else{a <- min(c(1,theta[i-1]/lambda*q_fact))}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
lambda <- 5
n <- 10000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta[i-1]+1){a <- min(c(1,lambda/theta_new*q_fact))}
else{a <- min(c(1,theta[i-1]/lambda*q_fact))}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
lambda <- 5
n <- 10000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta[i-1]+1){a <- min(c(1,lambda/theta_new*q_fact))}
else{a <- min(c(1,theta[i-1]/lambda*q_fact))}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
lambda <- 5
n <- 50000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta[i-1]+1){a <- min(c(1,lambda/theta_new*q_fact))}
else{a <- min(c(1,theta[i-1]/lambda*q_fact))}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
hist(theta)
hist(theta,probability = T)
lines(seq(0,15,length = 1000),dpois(seq(0,15,length = 1000)))
lines(seq(0,15,length = 1000),dpois(seq(0,15,length = 1000),lambda = 5))
warnings()
lines(seq(0,15,length.out = 1000),dpois(seq(0,15,length.out = 1000),lambda = 5))
hist(theta,probability = T)
lines(seq(0,15,length.out = 1000),dpois(seq(0,15,length.out = 1000),lambda = 5))
warnings()
lines(seq(0,15),dpois(seq(0,15),lambda = 5))
hist(theta,probability = T)
lines(seq(0,15),dpois(seq(0,15),lambda = 5))
hist(seq(0,15),dpois(seq(0,15),lambda = 5))
hist(theta,probability = T)
lines(seq(0,15),dpois(seq(0,15),lambda = 5))
n <- 100000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta[i-1]+1){a <- min(c(1,lambda/theta_new*q_fact))}
else{a <- min(c(1,theta[i-1]/lambda*q_fact))}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
hist(theta,probability = T)
lines(seq(0,15),dpois(seq(0,15),lambda = 5))
proposal <- function(theta){
if(theta==0){return(1)}
return(theta+sample(c(-1,1),1))
}
lambda <- 10
n <- 1000000
theta <- numeric(n)
for (i in 2:n) {
theta_new <- proposal(theta[i-1])
q_fact <- 1
if(theta_new == 0){q_fact <- 2}
else if(theta_new == 1 && theta[i-1] ==0){q_fact <- 1/2}
if(theta_new == theta[i-1]+1){a <- min(c(1,lambda/theta_new*q_fact))}
else{a <- min(c(1,theta[i-1]/lambda*q_fact))}
if(runif(1)<a){theta[i] <- theta_new}
else{theta[i] <- theta[i-1]}
}
mean(theta)
hist(theta,probability = T)
lines(seq(0,15),dpois(seq(0,15),lambda = 5))
hist(theta,probability = T)
lines(seq(0,15),dpois(seq(0,15),lambda = 10))
hist(theta,probability = T)
lines(seq(0,15),dpois(seq(0,25),lambda = 10))
hist(theta,probability = T)
lines(seq(0,25),dpois(seq(0,25),lambda = 10))
##7.6
Q <- matrix(c(-2,1,1,0,
1,-3,1,1,
2,2,-4,0,
1,2,3,-6),nrow = 4,ncol = 1,byrow = T)
Q
##7.6
Q <- matrix(c(-2,1,1,0,
1,-3,1,1,
2,2,-4,0,
1,2,3,-6),nrow = 4,ncol = 4,byrow = T)
Q
b <- numeric(4)
solve(t(Q),b)
det(Q)
b
##### Matrix powers ###############################
# matrixpower(mat,k) mat^k
#
matrixpower <- function(mat,k) {
if (k == 0) return (diag(dim(mat)[1]))
if (k == 1) return(mat)
if (k > 1) return( mat %*% matrixpower(mat, k-1))
}
markov <- function(init,mat,n,labels) {
if (missing(labels)) labels <- 1:length(init)
simlist <- numeric(n+1)
states <- 1:length(init)
simlist[1] <- sample(states,1,prob=init)
for (i in 2:(n+1))
{ simlist[i] <- sample(states,1,prob=mat[simlist[i-1],]) }
labels[simlist]
}
####################################################
######## Build the transition matrix for random walk on n-cycle
n <- 25
r1 <- c(0,1/2,rep(0,n-3),1/2)
tmat <- matrix(0,nrow=n,ncol=n)
tmat[1,] <- r1
for (i in 1:(n-1)) tmat[26-i,] <- r1[1 + (i:(n+i-1)) %% n]
### Start the RW on vertex 1
init <- c(1,rep(0,n-1))
sim <- markov(init,tmat,100) # 100 steps
sim
expm(1000*Q)
install.packages("expm")
library(expm)
expm(1000*Q)
6/(25+23*6)
t(Q)
nullspace(t(Q))
install.packages("pracma")
library(pracma)
nullspace(t(Q))
sum(nullspace(t(Q)))
pi
v <- nullspace(t(Q))
v <- v/sum(v)
sum(v)
v
expm(1000*Q)
expm(1000*Q)
library(expm)
expm(1000*Q)
help(expm)
matrixpower(1000*Q)
matrixpower(1000*Q,100)
matrixpower(1000*Q,10)
##7.6
Q <- matrix(c(-2,1,1,0,
1,-3,1,1,
2,2,-4,0,
1,2,3,-6),nrow = 4,ncol = 4,byrow = T)
Q
b <- numeric(4)
solve(t(Q),b)
expm(1000*Q)
library(expm)
expm(1000*Q)
v <- nullspace(t(Q))
v <- c(5/3,1,23/300)
v <- v/sum(v)
v
v <- c(5/3,1,30/103)
v <- v/sum(v)
v
P <- matrix(c(0,6/10,4/10,
9/10,0,1/10,
1,0,0),nrow = 3, ncol = 3,byrow = T)
P
t(P) %*% v
v
##### Matrix powers ###############################
# matrixpower(mat,k) mat^k
#
matrixpower <- function(mat,k) {
if (k == 0) return (diag(dim(mat)[1]))
if (k == 1) return(mat)
if (k > 1) return( mat %*% matrixpower(mat, k-1))
}
matrixpower(P,100)
matrixpower(P,1000)
v
solve(t(P),numeric(3))
help(solve)
solve(t(P),numeric(3))
library(pracma)
library(expm)
nullspace(t(P))
nullspace(P)
det(P)
nullspace(t(P-diag(3)))
v
t(P) %*% nullspace(t(P-diag(3)))
5/3/(1+5/3+30/103)
p <- nullspace(t(P-diag(3)))
p <- p/sum(p)
p
p/c(2,3,4)
(p/c(2,3,4))/sum(p/c(2,3,4))
t(P-diag(3))
10*t(P-diag(3))
1/(1+5/3+23/30)
(1+0.18/12)^(12*3)
(1+0.18)^(3)
exp(0.18*3)
1/1.1
1/1.1/1.1
50000/1.08^10
10000/1.06^3+10000/1.06^5
50000*(1-1.08^10)/(1-1.08)
50000*(1-1.08^-10)/(1-1.08)
50000*(1-1.08^(-10))/(1.08-1)
50000/1.08^7*(1-1.08^(-3))/0.08
50000/1.08^7*(1-1.08^(-4))/0.08
50000/1.08^6*(1-1.08^(-4))/0.08
fint <- function(x,y,xi) xi*sin(x*xi)*sinh(y*xi)/((1+xi^2)*sinh(xi)
)
fint(1,1,1)
f <- function(x,y) 2/pi*integrate(fint,0,inf,x = x,y = y)$value
f(1,1)
f <- function(x,y) 2/pi*integrate(fint,0,Inf,x = x,y = y)$value
f(1,1)
sinh(0)
f <- function(x,y) 2/pi*integrate(fint,0.01,Inf,x = x,y = y)$value
f(1,1)
f <- function(x,y) 2/pi*integrate(fint,0,Inf,x = x,y = y)$value
f(1,2)
f(5,2)
fint(1,1,0)
fint(1,1,5)
fint(1,1,100)
fint(1,1,10000)
fint(1,1,1000)
fint(1,1,500)
fint(1,1,600)
fint(1,1,700)
fint(1,1,800)
f <- function(x,y) 2/pi*integrate(fint,0,100,x = x,y = y)$value
f(1,1)
f <- function(x,y) 2/pi*integrate(fint,0,700,x = x,y = y)$value
f(1,1)
gint <- function(x,y,t) -exp(abs(t-x))*y/pi/(t^2+y^2)
gint(1,1,1)
g <- function(x,y) integrate(gint,-Inf,Inf,x = x, y= y)
g(1,1)
g <- function(x,y) 2*integrate(gint,0,700,x = x, y= y)
g(1,1)
g <- function(x,y) 2*integrate(gint,0,700,x = x, y= y)$value
g(1,1)
gint(1,1,0)
gint(1,1,50)
gint <- function(x,y,t) -exp(-abs(t-x))*y/pi/(t^2+y^2)
g(1,1)
g <- function(x,y) 2*integrate(gint,0,Inf,x = x, y= y)$value
g(1,1)
g(1,2)
g(1,5)
f(1,5)
f(5,5)
f(5,1)
f(1,1)
choose(5,2)
2^
6
64+16+8+8+4+4+4+2
110/7
(64+16+8+8+4+4+2)/7
(32+16+8+8+4+4+2)/7
(32+16+8+8+4+4+1)/7
(32+0+8+8+4+0+2)/5
(32+16+8+8+4+4+2)
74/2
(32+16+8+8+4+4+2)
(32+16+8+8+4+4+2)
2^20/(32+16+8+8+4+4+2)
1+10+30+20+20+24
x = c(2^5,2^4,2^3,2^3,2^2,2^2,2)
y =c(1,10,30,20,20,15,24)
sum(x*y)/120
sum(x*y)/7
sum(x*y)
y =c(1,0,30,20,20,0,24)
sum(x*y)/sum(y)
y =c(1,10,15,20,20,30,24)
sum(y)
sum(x*y)/sum(y)
sum(x*y)/7
sum(x*y)/sum(y)
y
sum(y)
x
sum(x*y)
choose(4,2)
install.packages("rmarkdown")
library(rmarkdown)
version
installed.packages()
install.packages("installr")
library(installr)
updateR()
version
updateR()
updateR()
render("readme.Rmd")
pwd
pwd()
cwd()
wd
wd()
getwd()
setwd("D:/")
getwd()
render()
setwd("D:/Dokument/Programmering/Reinforcement Learning CS234/DQN/Pong/DuelingDoubleDQNData")
getwd()
setwd("D:/Dokument/Programmering/Reinforcement Learning CS234/DQN")
getwd()
test = read.csv(Pong/DuelingDoubleDQNData/)
test = read.csv("Pong/DuelingDoubleDQNData/eval_reward")
test = read.csv("Pong/DuelingDoubleDQNData/eval_reward.csv")
test
test.step
test.Step
eval_reward = read.csv("Pong/DuelingDoubleDQNData/eval_reward.csv")
eval_reward(Step)
eval_reward
Step
delist(eval_reward)
help(head)
head(eval_reward)
typeof(eval_reward)
eval_reward(1)
eval_reward[1]
attach(eval_reward)
Step
Value
Value[0]
Value[1]
library(tideverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tideverse)
install.packages("tidyverse")
library(tideverse)
library(tidyverse)
ggplot(data = eval_reward)
geom_smooth(mapping = aes(x = Step, y = Value))
Step
geom_smooth(mapping = aes(x = Steps, y = Value))
Steps
attach(eval_reward)
eval_reward
Step
geom_smooth(mapping = aes(x = Steps, y = Value))
ggplot(data = eval_reward)
geom_smooth(mapping = aes(x = Step, y = Value))
ggplot(data = eval_reward) + geom_smoooth(mapping = aes(x = Step, y = Value))
ggplot(data = eval_reward) + geom_smooth(mapping = aes(x = Step, y = Value))
